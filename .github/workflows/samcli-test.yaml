name: samcli-test

on:
  push:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/e2e-macos.yaml'
      - '.github/workflows/e2e-windows.yaml'
      - '.github/workflows/e2e-linux.yaml'
      - 'contrib/packaging/**'
      - 'deps/**'
      - 'finch.yaml.d/**'
      - 'winres'
      - 'Makefile*'
      - '.golangci.yaml'
      - '!contrib/hello-finch/**'
  pull_request:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/e2e-macos.yaml'
      - '.github/workflows/e2e-windows.yaml'
      - '.github/workflows/e2e-linux.yaml'
      - 'contrib/packaging/**'
      - 'deps/**'
      - 'finch.yaml.d/**'
      - 'winres'
      - 'Makefile*'
      - '.golangci.yaml'
      - '!contrib/hello-finch/**'
      - '.github/workflows/samcli-integration-test.yaml'
      - '.github/workflows/samcli-test.yaml'
  # schedule:
  #   - cron: '0 9 * * *' # midnight
  workflow_dispatch:    # manual trigger

permissions:
  # This is required for configure-aws-credentials to request an OIDC JWT ID token to access AWS resources later on.
  # More info: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
  id-token: write
  contents: read    # This is required for actions/checkout
jobs:
  samcli-test:
    runs-on: ubuntu-latest
    timeout-minutes: 250 # allows 30+ min buffer
    env:
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      SAM_CLI_DEV: 1
    steps:

      # finch-daemon is part of the core
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: 'recursive'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # min. supported by SAMcli

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21 ' # not sure what to put here (recent Go)

      - name: Make Finch
        run: |
          make

      - name: Set up SAM CLI from source
        run: |
          python -m pip install --upgrade pip
          git clone https://github.com/aws/aws-sam-cli.git
          cd aws-sam-cli
          git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
          git submodule update --init --recursive
          make init
          which samdev
          samdev --version

      - name: Run unit tests
        working-directory: aws-sam-cli  
        run: |

          # Run the unit tests and capture output
          make test | tee unit_test_output.txt

          # # Check if tests passed
          # if ! grep -q "failed=0" unit_test_output.txt; then
          #   echo "Unit tests failed!"
          #   exit 1
          # fi

          # Extract coverage percentage
          COVERAGE=$(grep -o "[0-9]\+%" unit_test_output.txt | head -1 | tr -d '%')

          # Check if coverage is at least 90% (allowing for some variation from the ~94%)
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" -lt 90 ]; then
            echo "Coverage is below expected threshold! Got: $COVERAGE%, Expected: ~94%"
            exit 1
          else
            echo "Unit tests passed with $COVERAGE% coverage (expected ~94%)"
          fi

      - name: Setup finch-daemon
        run: |
          # Navigate to finch-daemon directory and build it
          cd deps/finch-core/src/finch-daemon
          make

          # Install nerdctl explicitly
          NERDCTL_VERSION=1.6.2
          wget https://github.com/containerd/nerdctl/releases/download/v${NERDCTL_VERSION}/nerdctl-${NERDCTL_VERSION}-linux-amd64.tar.gz
          sudo tar -xzf nerdctl-${NERDCTL_VERSION}-linux-amd64.tar.gz -C /usr/local/bin
          sudo chmod +x /usr/local/bin/nerdctl

          # Verify nerdctl is installed
          which nerdctl
          nerdctl --version

          # Create necessary directories if they don't exist
          sudo mkdir -p /tmp/finch-daemon
          sudo chmod 777 /tmp/finch-daemon

          # Start containerd if it's not already running
          sudo containerd &
          sleep 5

          # Start finch-daemon using the binary we just built
          echo "Starting finch-daemon from bin/finch-daemon"
          sudo ./bin/finch-daemon --debug &
          sleep 5

          # Check if finch-daemon socket exists
          ls -la /run/finch.sock /run/finch-credential.sock || echo "Finch-daemon socket not found"

          # Fix socket permissions if needed
          sudo chmod 666 /run/finch.sock /run/finch-credential.sock 2>/dev/null || true

          # Verify the daemon is running
          curl --unix-socket /run/finch.sock http://localhost/v1/version || (echo "Error: finch-daemon is not responding" && exit 1)
          echo "finch-daemon is running successfully"

      - name: Run local invoke test
        timeout-minutes: 75
        working-directory: aws-sam-cli
        run: |
          export DOCKER_HOST=unix:///run/finch.sock

          # Run the test, display output
          python -m pytest tests/integration/local/invoke -k 'not Terraform' -v > test_output.txt 2>&1 || true
          cat test_output.txt

          # Create a list of expected failing tests
          cat > expected_failures.txt << 'EOF'
          test_invoke_with_error_during_image_build
          test_invoke_with_timeout_set_0_TimeoutFunction
          test_invoke_with_timeout_set_1_TimeoutFunctionWithParameter
          test_invoke_with_timeout_set_2_TimeoutFunctionWithStringParameter
          test_building_new_rapid_image_removes_old_rapid_images
          test_invoke_returns_expected_results_from_git_function
          test_invoke_returns_expected_results_from_git_function_with_parameters
          EOF

          # Extract actual failing tests
          grep "FAILED" test_output.txt | sed 's/.*::\(test_[a-zA-Z0-9_]*\).*/\1/' > actual_failures.txt

          # Find unexpected failures (failures not in the expected list)
          UNEXPECTED_FAILURES=$(grep -v -f expected_failures.txt actual_failures.txt || true)

          # Check if there are any unexpected failures
          if [ -n "$UNEXPECTED_FAILURES" ]; then
            echo "Unexpected test failures found:"
            echo "$UNEXPECTED_FAILURES"
            echo "Invoke test failed due to unexpected test failures"
            exit 1
          else
            echo "All test failures were expected. Invoke test passed!"
          fi

      - name: Run start-lambda test
        timeout-minutes: 30
        working-directory: aws-sam-cli
        run: |
          export DOCKER_HOST=unix:///run/finch.sock

          # Run the tests
          python -m pytest tests/integration/local/start_lambda -k 'not Terraform' -v > start_lambda_output.txt 2>&1 || true
          cat start_lambda_output.txt

          # Check if any tests failed
          if grep -q "FAILED" start_lambda_output.txt; then
            echo "Some start-lambda tests failed!"
            exit 1
          else
            echo "All start-lambda tests passed!"
          fi

      - name: Run start-api test
        timeout-minutes: 75
        working-directory: aws-sam-cli
        run: |
          export DOCKER_HOST=unix:///run/finch.sock        

          # Increase file limit to prevent "too many files open" error
          ulimit -n 4096 || true

          # Run the tests
          python -m pytest tests/integration/local/start_api -k 'not Terraform' -v > start_api_output.txt 2>&1 || true
          cat start_api_output.txt

          # Check if any tests failed
          if grep -q "FAILED" start_api_output.txt; then
            echo "Some start-api tests failed!"
            exit 1
          else
            echo "All start-api tests passed!"
          fi





